#include <stdint.h>
#include <stdio.h>
#include <string.h>
#include <unistd.h>
struct header {
  uint64_t size;
  struct header *next;
};

void print_out(char *format, void *data, size_t data_size) {
  char buf[BUF_SIZE];
  ssize_t len = snprintf(buf, BUF_SIZE, format,
                          data_size == sizeof(uint64_t) ? *(uint64_t *)data
                                                        : *(void **)data);
  if (len < 0) {
    handle_error("snprintf");
  }
  write(STDOUT_FILENO, buf, len);
}

int main() {
  void *program_break = sbrk(256);
  struct header *header1 = (struct header *)program_break;
  header1->size = 128;
  header1->next = NULL;
  uint8_t *header1data = (uint8_t *)(header1 + 1);
  // for (int i = 0; i < 112; i++) {
  //*(header1data + i) = 0x00;
  //}
  memset(header1data, 0x00, 112);

  struct header *header2 = (struct header *)(program_break + 128);
  header2->size = 128;
  header2->next = header1;
  uint8_t *header2data = (uint8_t *)(header2 + 1);
  // for (int i = 0; i < 112; i++) {
  //*(header2data + i) = 0xFF;
  //}
  memset(header2data, 0xFF, 112);

  printf("First block start: %p\n", header1);
  printf("Second block start: %p\n", header2);
  printf("First block size: %lu\n", header1->size);
  printf("Second block size: %lu\n", header2->size);
  printf("First block .next: %p\n", header1->next);
  printf("Second block .next: %p\n", header2->next);
  // printf("%zu\n", header1);
  // printf("%zu\n", header2);
  uint8_t *reader1 = (uint8_t *)(header1 + 1);
  for (int i = 0; i < 112; i++) {
    printf("%02X, Address1: %p\n", reader1[i], &reader1[i]);
  }

  uint8_t *reader2 = (uint8_t *)(header2 + 1);
  for (int i = 0; i < 112; i++) {
    printf("%02X, Address2: %p\n", reader2[i], &reader2[i]);
  }
}
